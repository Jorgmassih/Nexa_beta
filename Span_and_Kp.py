#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 22, 2018 05:04:29 PM AST  platform: Linux

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Span_and_Kp_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Toplevel()
    Span_and_Kp_support.set_Tk_var()
    top = Span_y_Kp (root)
    Span_and_Kp_support.init(root, top)
    root.mainloop()

w = None
def create_Span_y_Kp(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Span_and_Kp_support.set_Tk_var()
    top = Span_y_Kp (w)
    Span_and_Kp_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Span_y_Kp():
    global w
    w.destroy()
    w = None


#**********************Edited************************************

#----------------------Ecuations solver function-----------------
    
def calculate(self, Pv_min, Pv_max, Sp_min, Sp_max, R1, R3, S_min, S_max):
    e_min = Sp_min - Pv_max
    e_max = Sp_max - Pv_min
    Span = e_min - e_max
    Span_new = S_min - S_max
    A = Span_new/Span
    R2 = R1*A
    Vref = e_min*A
    if(Vref<0):
        Vref = Vref*(-1)
    
        
    text_result = """
    R1 = {}
    R2 = {}
    R3 = {}
    Vref = {}
    """.format(round(R1,2), round(R2,2), round(R3,2), round(Vref,2))
        
    self.Results_label.configure(text=text_result)
        
#************************Edited************************************







class Span_y_Kp:



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {DejaVu Sans} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("540x550+443+54")
        top.title("Span y Kp")
        top.configure(background="#2d3436")
        top.configure(highlightcolor="black")



        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.037, rely=0.036, relheight=0.155
                , relwidth=0.926)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(foreground="#ffffff")
        self.Labelframe1.configure(text='''Resistencias (ohm)''')
        self.Labelframe1.configure(background="#2d3436")
        self.Labelframe1.configure(width=500)

        self.R1 = Entry(self.Labelframe1)
        self.R1.place(relx=0.14, rely=0.471, height=23, relwidth=0.192
                , bordermode='ignore')
        self.R1.configure(background="white")
        self.R1.configure(font="TkFixedFont")
        self.R1.configure(relief=FLAT)
        self.R1.configure(selectbackground="#c4c4c4")
        self.R1.configure(textvariable=Span_and_Kp_support.r1)

        self.Label1 = Label(self.Labelframe1)
        self.Label1.place(relx=0.04, rely=0.471, height=21, width=39
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#2d3436")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''R1''')

        self.Label1_1 = Label(self.Labelframe1)
        self.Label1_1.place(relx=0.48, rely=0.471, height=21, width=29
                , bordermode='ignore')
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(background="#2d3436")
        self.Label1_1.configure(foreground="#ffffff")
        self.Label1_1.configure(text='''R3''')

        self.R3 = Entry(self.Labelframe1)
        self.R3.place(relx=0.56, rely=0.471, height=23, relwidth=0.192
                , bordermode='ignore')
        self.R3.configure(background="white")
        self.R3.configure(font="TkFixedFont")
        self.R3.configure(relief=FLAT)
        self.R3.configure(selectbackground="#c4c4c4")
        self.R3.configure(textvariable=Span_and_Kp_support.r3)

        self.Labelframe1_2 = LabelFrame(top)
        self.Labelframe1_2.place(relx=0.037, rely=0.6, relheight=0.264
                , relwidth=0.926)
        self.Labelframe1_2.configure(relief=GROOVE)
        self.Labelframe1_2.configure(foreground="#ffffff")
        self.Labelframe1_2.configure(text='''Resultados''')
        self.Labelframe1_2.configure(background="#2d3436")
        self.Labelframe1_2.configure(width=500)

        self.Results_label = Label(self.Labelframe1_2)
        self.Results_label.place(relx=0.02, rely=0.207, height=111, width=479
                , bordermode='ignore')
        self.Results_label.configure(activebackground="#f9f9f9")
        self.Results_label.configure(background="#2d3436")
        self.Results_label.configure(foreground="#ffffff")
        self.Results_label.configure(text='''Los resultados aparecerÃ¡n aqui''')

        self.Calculate = Button(top, command=lambda:calculate(self,
                                                                   Span_and_Kp_support.pv_min.get(),
                                                                   Span_and_Kp_support.pv_max.get(),
                                                                   Span_and_Kp_support.sp_min.get(),
                                                                   Span_and_Kp_support.sp_max.get(),
                                                                   Span_and_Kp_support.r1.get(),
                                                                   Span_and_Kp_support.r3.get(),
                                                                   Span_and_Kp_support.s_min.get(),
                                                                   Span_and_Kp_support.s_max.get()
                                                              ))
        self.Calculate.place(relx=0.037, rely=0.891, height=39, width=499)
        self.Calculate.configure(activebackground="#d9d9d9")
        self.Calculate.configure(background="#00b894")
        self.Calculate.configure(font=font9)
        self.Calculate.configure(highlightbackground="#00b894")
        self.Calculate.configure(relief=FLAT)
        self.Calculate.configure(text='''Calcular''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Labelframe1_1 = LabelFrame(top)
        self.Labelframe1_1.place(relx=0.037, rely=0.418, relheight=0.155
                , relwidth=0.926)
        self.Labelframe1_1.configure(relief=GROOVE)
        self.Labelframe1_1.configure(foreground="#ffffff")
        self.Labelframe1_1.configure(text='''Span deseado''')
        self.Labelframe1_1.configure(background="#2d3436")
        self.Labelframe1_1.configure(width=500)

        self.V_in_min = Entry(self.Labelframe1_1)
        self.V_in_min.place(relx=0.5, rely=0.471, height=23, relwidth=0.152
                , bordermode='ignore')
        self.V_in_min.configure(background="white")
        self.V_in_min.configure(font="TkFixedFont")
        self.V_in_min.configure(selectbackground="#c4c4c4")
        self.V_in_min.configure(textvariable=Span_and_Kp_support.s_min)
        self.V_in_min.configure(width=76)

        self.V_in_max = Entry(self.Labelframe1_1)
        self.V_in_max.place(relx=0.7, rely=0.471, height=23, relwidth=0.152
                , bordermode='ignore')
        self.V_in_max.configure(background="white")
        self.V_in_max.configure(font="TkFixedFont")
        self.V_in_max.configure(selectbackground="#c4c4c4")
        self.V_in_max.configure(textvariable=Span_and_Kp_support.s_max)
        self.V_in_max.configure(width=76)

        self.Label3 = Label(self.Labelframe1_1)
        self.Label3.place(relx=0.06, rely=0.471, height=21, width=189
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#2d3436")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(text='''Rango de span (min - max)''')

        self.Labelframe1_1 = LabelFrame(top)
        self.Labelframe1_1.place(relx=0.037, rely=0.218, relheight=0.173
                , relwidth=0.926)
        self.Labelframe1_1.configure(relief=GROOVE)
        self.Labelframe1_1.configure(foreground="#ffffff")
        self.Labelframe1_1.configure(text='''Pv y Sp (v)''')
        self.Labelframe1_1.configure(background="#2d3436")
        self.Labelframe1_1.configure(width=500)

        self.Pv_min = Entry(self.Labelframe1_1)
        self.Pv_min.place(relx=0.08, rely=0.526, height=23, relwidth=0.132
                , bordermode='ignore')
        self.Pv_min.configure(background="white")
        self.Pv_min.configure(font="TkFixedFont")
        self.Pv_min.configure(relief=FLAT)
        self.Pv_min.configure(selectbackground="#c4c4c4")
        self.Pv_min.configure(textvariable=Span_and_Kp_support.pv_min)

        self.Label1_4 = Label(self.Labelframe1_1)
        self.Label1_4.place(relx=0.06, rely=0.211, height=21, width=109
                , bordermode='ignore')
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(background="#2d3436")
        self.Label1_4.configure(foreground="#ffffff")
        self.Label1_4.configure(text='''Pv ( min - max)''')

        self.Label1_2 = Label(self.Labelframe1_1)
        self.Label1_2.place(relx=0.48, rely=0.211, height=21, width=109
                , bordermode='ignore')
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(background="#2d3436")
        self.Label1_2.configure(foreground="#ffffff")
        self.Label1_2.configure(text='''Sp (min - max)''')

        self.Pv_max = Entry(self.Labelframe1_1)
        self.Pv_max.place(relx=0.26, rely=0.526, height=23, relwidth=0.132
                , bordermode='ignore')
        self.Pv_max.configure(background="white")
        self.Pv_max.configure(font="TkFixedFont")
        self.Pv_max.configure(relief=FLAT)
        self.Pv_max.configure(selectbackground="#c4c4c4")
        self.Pv_max.configure(textvariable=Span_and_Kp_support.pv_max)

        self.Sp_min = Entry(self.Labelframe1_1)
        self.Sp_min.place(relx=0.5, rely=0.526, height=23, relwidth=0.132
                , bordermode='ignore')
        self.Sp_min.configure(background="white")
        self.Sp_min.configure(font="TkFixedFont")
        self.Sp_min.configure(relief=FLAT)
        self.Sp_min.configure(selectbackground="#c4c4c4")
        self.Sp_min.configure(textvariable=Span_and_Kp_support.sp_min)

        self.Sp_max = Entry(self.Labelframe1_1)
        self.Sp_max.place(relx=0.66, rely=0.526, height=23, relwidth=0.132
                , bordermode='ignore')
        self.Sp_max.configure(background="white")
        self.Sp_max.configure(font="TkFixedFont")
        self.Sp_max.configure(relief=FLAT)
        self.Sp_max.configure(selectbackground="#c4c4c4")
        self.Sp_max.configure(textvariable=Span_and_Kp_support.sp_max)






if __name__ == '__main__':
    vp_start_gui()



